require('dotenv').config();
const {
  db,
  Playlist,
  PlaylistSong,
  Party,
  User,
  Song,
} = require('../db/database.js');
const express = require('express');
const app = express();
const { PORT }= process.env;
const cors = require('cors');
const path = require('path');
const DIST_DIR = path.join(__dirname, '../dist');
const HTML_FILE = path.join(DIST_DIR, 'index.html');

app.use(express.json());
app.use(cors());


app.use(express.static(DIST_DIR));

app.get('/', (req, res) => {
  res.sendFile(HTML_FILE);
});


app.post('/login', async (req, res) => {
  const user = await User.findOne({ where: { email: req.body.email } })

  if (user === null) {
    await User.create(req.body)
      .then((dbResponse) => {
        res.send({ user: dbResponse });
      })
  } else {
    // Look up (findOne) playlist id with user id (user.id)
    const playlist = await Playlist.findOne({ where: { userId: user.id } })
    if (playlist) {
      // Look up (findAll) songIDs with playlistID
      const playlistSongs = await PlaylistSong.findAll({ where: { playlistId: playlist.id }, raw: true })
      if (playlistSongs) {
        // Look up (findAll) songs with songID
        // console.log('songIDs --->', songIDs)
        const songs = playlistSongs.map(song => {
          return Song.findByPk(song.songId, { raw: true });
        })

        await Promise.all(songs).then(mapped => res.send({ user, songs: mapped }));
        return;
        // const songs = await Song.findAll({ where: {  } })
      }
    }
    res.send({ user }); // Send em back to the client
  }
});

// update votes
  app.put('/vote', async (req, res) => {
    console.log(req.body)
    const song = await Song.findOne({ where: { title: req.body.title } })
    const playlist_song = await PlaylistSong.findOne({ where: { songId: song.id } })
    PlaylistSong.update({ vote: playlist_song.vote + 1 },
      { where: { songId: song.id }
    })
    .then(async () => {
      const updated_playlist_song = await PlaylistSong.findOne({ where: { songId: song.id } })
      const all_playlist_songs = await PlaylistSong.findAll({}, {raw: true})
      const highest = await all_playlist_songs.reduce((acc, val) => {
        if (val.vote > acc.vote) return val
        return acc
      }, {vote: 0})
      const highestVote = await Song.findOne({ where: { id: highest.id } })
      res.send({ newVoteCount: updated_playlist_song.vote, highestVote })
    })
});

// create host
app.post('/host', async (req, res) => {
  User.update({host: req.body.host}, {
      where: {
      firstName: req.body.firstName
    }
  });
});

app.post('/playlist/:user', async (req, res) => {
  // console.log('Request Params', req.params.user)
  // console.log('Request Body', req.body)
  // let songId;
  // let playlistId;
  const userId = req.params.user;

  let song = await Song.findOne({ where: { url: req.body.url } }) // Look for song in the db
  let alreadyExists = false;

  if (song === null) {
    await Song.create(req.body) // Create entry if its not there
      .then(({ dataValues }) => {
        song = dataValues; // Save the song the db generated
      })
  } else {
    alreadyExists = true;
  }

  let playlist = await Playlist.findOne({ where: { userId } }) // Look for existing playlist for current user
  
  if (playlist === null) {
    await Playlist.create({ userId }) // Create playlist if user doesn't have one
      .then(({ dataValues }) => {
        playlist = dataValues; // Save the playlist ID generated by the db
      })
  };

  let playlist_song = await PlaylistSong.findOne({ where: { playlistId: playlist.id, songId: song.id } });

  if (playlist_song === null) {
    PlaylistSong.create({ playlistId: playlist.id, songId: song.id });
  };


  res.send(alreadyExists); // Tell client if song was already in the database

  console.log('playlistId', playlist.id)
  console.log('songId', song.id)
});

app.listen(PORT, console.log(`Listening on http://localhost:${PORT}`));

